{"version":3,"sources":["ui/Form/Form.js","api/axios-instance.js","api/localStorageService.js","redux/weatherData.js","ui/Form/FormContainer.js","ui/Weather/Weather.js","ui/Weather/WeatherContainer.js","ui/WeatherApp.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["Form","props","useState","value","setValue","editMode","setEditMode","editFontSize","setEditFontSize","editColorMode","setEditColorMode","closeSetting","setColor","e","color","currentTarget","innerText","changeColor","className","placeholder","list","onChange","onClick","trim","length","getWeather","setCity","changeStatus","setErrorMessage","id","cities","map","c","index","key","alt","src","changeFontSize","status","errorMessage","axiosInstance","axios","create","baseURL","API","getWeatherAPI","city","get","res","data","response","Promise","reject","keys","localStorageService","cityAsString","JSON","stringify","filter","localStorage","setItem","resolve","parse","getItem","statuses","initialState","coefficient","API_KEY","temp","undefined","main","windSpeed","pressure","hamidity","sunrise","sunset","nameCity","addCity","type","loadCitiesAC","error","weatherData","state","action","newData","convertTimeSun","time","date","Date","setTime","getHours","getMinutes","getSeconds","FormContainer","this","loadCities","React","Component","connect","dispatch","getState","a","Math","round","weather","description","wind","speed","humidity","sys","name","checkCity","prevCity","toUpperCase","Weather","now","checkTime","i","style","fontSize","toDateString","WeatherContainer","WeatherApp","App","Boolean","window","location","hostname","match","combinedReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c7f9221.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './../../App.css';\r\n\r\n\r\nlet Form = (props) => {\r\n\r\n    const [value, setValue] = useState('');\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [editFontSize, setEditFontSize] = useState(false);\r\n    const [editColorMode, setEditColorMode] = useState(false);\r\n\r\n    let updateText = (e) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    let closeSetting = () => {\r\n        setEditColorMode(false);\r\n        setEditFontSize(false);\r\n        setEditMode(false);\r\n    }\r\n\r\n    let onGetWeather = () => {\r\n        if (value.trim().length > 0) {\r\n            props.getWeather(value)\r\n            props.setCity(value)\r\n        }\r\n        else {\r\n            props.changeStatus('ERROR');\r\n            props.setErrorMessage('Введите город')\r\n        }\r\n    }\r\n    let setColor = (e) => {\r\n        let color = e.currentTarget.innerText;\r\n        props.changeColor(color)\r\n    }\r\n\r\n    return <div className=\"form\" >\r\n        <div className=\"formSearchAndSetting\">\r\n            <div className=\"searchPath\">\r\n                <input placeholder=\"Введите город\" list=\"cities\" className=\"inputCity\" onChange={updateText} value={value} />\r\n                <button onClick={onGetWeather} className=\"buttonSearch\">Найти </button>\r\n                <datalist id=\"cities\">\r\n                    {props.cities.map((c, index) => {\r\n                        return <option key={index} value={c} />\r\n                    })}\r\n                </datalist>\r\n            </div>\r\n            <div className=\"setting\" >\r\n                <div className=\"settingImg\" onClick={() => { setEditMode(!editMode); setEditFontSize(false); setEditColorMode(false); }}>\r\n                    <img alt=\"setting\" src=\"http://icons.iconarchive.com/icons/pelfusion/long-shadow-media/256/Settings-icon.png\"></img>\r\n                </div>\r\n                {editMode && <div className=\"menuSetting\">\r\n                    <div onClick={() => { setEditMode(false); setEditFontSize(true) }}>Изменить размер</div>\r\n                    <div onClick={() => { setEditMode(false); setEditColorMode(true) }}>Изменить цвет текста</div>\r\n                    <div onClick={closeSetting}>выйти</div>\r\n                </div>}\r\n                {editFontSize && <div className=\"menuSetting\">\r\n                    <div onClick={() => props.changeFontSize(0.75)}>75%</div>\r\n                    <div onClick={() => props.changeFontSize(1)}>100%</div>\r\n                    <div onClick={() => props.changeFontSize(1.25)}>125%</div>\r\n                    <div onClick={() => props.changeFontSize(1.50)}>150%</div>\r\n                    <div onClick={closeSetting}>выйти</div>\r\n                </div>}\r\n                {editColorMode && <div className=\"menuSetting\">\r\n                    <div onClick={setColor}>yellow</div>\r\n                    <div onClick={setColor}>violet</div>\r\n                    <div onClick={setColor}>white</div>\r\n                    <div onClick={closeSetting}>выйти</div>\r\n                </div>}\r\n            </div>\r\n            <div className=\"status\">\r\n                {props.status === \"ERROR\" && <div><img alt=\"error\" src=\"https://docs.zendframework.com/zend-expressive/images/error.png\"></img></div>}\r\n                {props.status === \"SUCCESS\" && <img alt=\"success\" src=\"https://cdn4.iconfinder.com/data/icons/colicon/24/checkmark_done_complete-512.png\"></img>}\r\n                {props.status === \"INPROGRESS\" && <img alt=\"error\" src=\"https://www.avira.com/cache-buster-23424/static/common/images/loading.gif\"></img>}\r\n               \r\n            </div>\r\n            {props.status === \"ERROR\" && <div className=\"error\">\r\n                {props.errorMessage}\r\n            </div>}\r\n            \r\n\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport default Form;","import axios from \"axios\";\r\n\r\nexport const axiosInstance = axios.create({\r\n    baseURL: 'https://api.openweathermap.org/data/2.5/',\r\n})\r\n\r\nexport const API = {\r\n    async getWeatherAPI(city, key){\r\n        try{\r\n            const res = await axiosInstance.get(`weather?q=${city}&appid=${key}`)\r\n            return res.data;\r\n        }\r\n        catch(error){\r\n            if (error.response.status === 404){\r\n            return Promise.reject(\"city not found\");\r\n        } else {\r\n            return Promise.reject('some error')\r\n        }\r\n    }\r\n}}","const keys = { cities: 'cities' };\r\nconst maxCities = 5;\r\n\r\nexport const localStorageService = {\r\n    saveCities(cities) {\r\n        let cityAsString = JSON.stringify(cities.filter((c,index) => index < maxCities));\r\n        localStorage.setItem(keys.cities, cityAsString);\r\n        return Promise.resolve();\r\n    },\r\n    loadCities() {\r\n        const cities = JSON.parse(localStorage.getItem(keys.cities))\r\n        return Promise.resolve(cities || []);\r\n    }\r\n}","import { API } from \"../api/axios-instance\";\r\nimport { localStorageService } from \"../api/localStorageService\";\r\n\r\nexport const statuses = {\r\n    NOT_INITIALIZED: 'NOT_INITIALIZED',\r\n    ERROR: 'ERROR',\r\n    INPROGRESS: 'INPROGRESS',\r\n    SUCCESS: 'SUCCESS',\r\n}\r\n\r\nconst SET_WEATHER = \"WD/SET_WEATHER\";\r\nconst SET_CITY_FROM_INPUT = \"WD/SET_CITY_FROM_INPUT\";\r\nconst ADD_CITY = \"WD/ADD_CITY\";\r\nconst SET_CITY_FROM_LOCALSTORAGE = 'WD/SET_CITY_FROM_LOCALSTORAGE';\r\nconst CHANGE_FONT_SIZE = 'WD/CHANGE_FONT_SIZE';\r\nconst CHANGE_COLOR = \"WD/CHANGE_COLOR\";\r\nconst CHANGE_STATUS =\"WD/CHANGE_STATUS\";\r\nconst SET_ERROR_MESSAGE = \"WD/SET_ERROR_MESSAGE\";\r\n\r\nlet initialState = {\r\n\r\n    coefficient: 1,\r\n    color:'white',\r\n    status: statuses.NOT_INITIALIZED,\r\n    city: '',\r\n    API_KEY: '1ae16df993c07c547ccd1942b3965093',\r\n    cities: [],\r\n    errorMessage: '',\r\n    data: {\r\n        temp: undefined,\r\n        main: null,\r\n        city: null,\r\n        windSpeed: null,\r\n        pressure: null,\r\n        hamidity: null,\r\n        sunrise: null,\r\n        sunset: null,\r\n        nameCity: null,\r\n    },\r\n}\r\n\r\nexport const setWeather = (temp, main, windSpeed, pressure, hamidity, sunrise, sunset, nameCity) => ({\r\n    type: SET_WEATHER, temp, main, windSpeed, pressure, hamidity, sunrise, sunset, nameCity\r\n});\r\n// add city to localstorege\r\nexport const addCity = (city) => ({ type: ADD_CITY, city: city });\r\n//from input city\r\nexport const setCity = (value) => ({ type: SET_CITY_FROM_INPUT, value });\r\n//get city from localStorage\r\nexport const loadCitiesAC = (cities) => ({ type: SET_CITY_FROM_LOCALSTORAGE, cities });\r\nexport const changeFontSize = (coefficient) => ({ type: CHANGE_FONT_SIZE, coefficient});\r\nexport const changeColor = (color) => ({ type: CHANGE_COLOR, color});\r\nexport const changeStatus = (status) => ({type: CHANGE_STATUS, status});\r\nexport const setErrorMessage = (error) => ({type: SET_ERROR_MESSAGE, error});\r\n\r\nexport const loadCities = () => async (dispatch) => {\r\n    const cities = await localStorageService.loadCities();\r\n    dispatch(loadCitiesAC(cities));\r\n}\r\n\r\nconst weatherData = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_WEATHER: {\r\n            let newData = {\r\n                temp: action.temp,\r\n                main: action.main,\r\n                windSpeed: action.windSpeed,\r\n                pressure: action.pressure,\r\n                hamidity: action.hamidity,\r\n                sunrise: action.sunrise,\r\n                sunset: action.sunset,\r\n                nameCity: action.nameCity,\r\n            }\r\n            return { ...state, data: newData }\r\n        }\r\n        case ADD_CITY: {\r\n            return { ...state, cities: [action.city, ...state.cities] }\r\n        }\r\n        case SET_CITY_FROM_LOCALSTORAGE: {\r\n            return { ...state, cities: action.cities }\r\n        }\r\n        case SET_CITY_FROM_INPUT: {\r\n            return { ...state, city: action.value }\r\n        }\r\n        case CHANGE_FONT_SIZE: {\r\n            return { ...state, coefficient: action.coefficient}\r\n        }\r\n        case CHANGE_COLOR: {\r\n            return {...state, color: action.color}\r\n        }\r\n        case CHANGE_STATUS:{\r\n            return{...state, status: action.status}\r\n        }\r\n        case SET_ERROR_MESSAGE:{\r\n            return{...state, errorMessage: action.error}\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport default weatherData;\r\n\r\nexport const getWeather = (value) => async (dispatch, getState) => {\r\n\r\n    let city = value;\r\n    let cities = getState().data.cities;\r\n    dispatch(changeStatus(statuses.INPROGRESS))\r\n\r\n    try {\r\n\r\n        const data = await API.getWeatherAPI(value, getState().data.API_KEY);\r\n\r\n        dispatch(setWeather(Math.round(data.main.temp - 273), data.weather[0].description, data.wind.speed,\r\n            data.main.pressure, data.main.humidity, convertTimeSun(data.sys.sunrise), convertTimeSun(data.sys.sunset), data.name))\r\n\r\n        dispatch(changeStatus(statuses.SUCCESS))\r\n\r\n        let checkCity = cities.filter(prevCity => prevCity.toUpperCase() === city.toUpperCase());\r\n        if (checkCity.length === 0) dispatch(addCity(city))\r\n\r\n        if (checkCity.length === 0) {\r\n            localStorageService.saveCities(getState().data.cities)\r\n        }\r\n    }\r\n    catch (errorMessage) {\r\n        dispatch(changeStatus(statuses.ERROR))\r\n        dispatch(setErrorMessage(errorMessage))\r\n    }\r\n}\r\n\r\nlet convertTimeSun = (time) => {\r\n    var date = new Date();\r\n    date.setTime(time);\r\n    let res = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\r\n    return res;\r\n}\r\n\r\n","import React from 'react';\r\nimport Form from './Form';\r\nimport { connect } from 'react-redux';\r\nimport { getWeather, setCity, loadCities, changeFontSize, changeColor, changeStatus, setErrorMessage } from '../../redux/weatherData';\r\n\r\n\r\n\r\nclass FormContainer extends React.Component{\r\n\r\n    componentDidMount() {\r\n        this.props.loadCities();\r\n    }\r\n    \r\n    render() {\r\n        return  < Form {...this.props}/>  \r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) =>({\r\n    city: state.data.city,\r\n    cities: state.data.cities,\r\n    status: state.data.status,\r\n    errorMessage: state.data.errorMessage,\r\n    })\r\n\r\nlet mapDispatchToProps = (dispatch) => ({\r\n    getWeather: (value) => { dispatch(getWeather(value)) },\r\n    setCity: (value) => { dispatch(setCity(value)) },\r\n    loadCities: () => { dispatch(loadCities()) },\r\n    changeFontSize: (coefficient) => { dispatch(changeFontSize(coefficient)) },\r\n    changeColor: (color) => {dispatch(changeColor(color))},\r\n    changeStatus: (status) => {dispatch(changeStatus(status))},\r\n    setErrorMessage: (errorMessage) => {dispatch(setErrorMessage(errorMessage))}\r\n    })\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContainer);","import React from 'react'\r\nimport './../../App.css';\r\n\r\nlet Weather = (props) => {\r\n\r\n    //adds 0 before time if hours or minutes are less than 10\r\n    let now = new Date();\r\n    let checkTime = (i) => {\r\n        if (i < 10) {\r\n            i = \"0\" + i;\r\n        }\r\n        return i\r\n    }\r\n\r\n    return <div className=\"weather\">\r\n        <div style={{ fontSize: 18 * props.coefficient, color: props.color }}>\r\n            {props.data.temp && <div className=\"weatherInfo\">\r\n                <div className=\"weatherInfoFirstPath\">\r\n                    <span>{props.data.nameCity}</span>\r\n                    <span>{now.toDateString()}</span>\r\n                    <span style={{ fontSize: 30 * props.coefficient }} className=\"time\">{checkTime(now.getHours())}:{checkTime(now.getMinutes())}</span>\r\n                    <span>Скорость ветра: {props.data.windSpeed} м/с</span>\r\n                    <span>Давление: {props.data.pressure}</span>\r\n                </div>\r\n                <div className=\"weatherInfoSecondPath\">\r\n                    <div className=\"temp\">\r\n                        <span style={{ fontSize: 40 * props.coefficient }}>{props.data.temp}°C</span>\r\n                    </div>\r\n                    <div className=\"sun\">\r\n                        <div>    Время восхода солнца: {props.data.sunrise} </div>\r\n                        <div>    Время захода солнца: {props.data.sunset} </div>\r\n                    </div>\r\n                </div>\r\n            </div>}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Weather;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Weather from './Weather';\r\n\r\nclass WeatherContainer extends React.Component{\r\n\r\n    render() {\r\n        return  < Weather {...this.props}/>  \r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    data: state.data.data,\r\n    coefficient: state.data.coefficient,\r\n    city: state.data.city,\r\n    color: state.data.color,\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(WeatherContainer);\r\n\r\n\r\n","import React from 'react';\r\nimport './../App.css';\r\nimport FormContainer from './Form/FormContainer';\r\nimport WeatherContainer from './Weather/WeatherContainer';\r\n\r\n\r\nlet WeatherApp = (props) => {\r\n\r\n    return <div className=\"weatherApp\">\r\n         <FormContainer/>\r\n         <WeatherContainer/>\r\n    </div>\r\n\r\n\r\n}\r\n\r\nexport default WeatherApp;","import React from 'react';\nimport './App.css';\nimport WeatherApp from './ui/WeatherApp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <WeatherApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport weatherData from './weatherData';\r\n\r\nlet combinedReducers = combineReducers({\r\n    data: weatherData,\r\n})\r\n\r\nlet store = createStore(combinedReducers,applyMiddleware(thunk));\r\nwindow.store = store;\r\nexport default store ; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}